h1. Introduction

The name "Wilkin's Brains" comes from a guy I work with at Boeing.  Long
before I arrived, he was a young engineer who carried around schematic
drawings for a system he was working on.  These schematic drawings became
known as "Wilkin's Brains" because they held all the information that he needed
to do his job on a daily basis.

This project is along those same lines for allowing people to manage their
information in a logical and permenant way.

This encarnation of the project is a continuation of a project I used to
call Buckets.

h1. Use Cases

To describe what this program does, I'll start with some use cases to
explain some of the needs I want this to fill.  

I'll be the first to admit that there are some major overlaps with other
database systems and services already out there and that is no accident.
I am influenced by what I see and read about on the Internet.  Services
like Zoho, some 37signals products, and even low level databases such
as CouchDB have influenced this.  Perhaps one of these systems is better
suited for my needs - we will see.

h2. Phone Logs

When I'm going to make a business (or even personal) call to someone, I'd
like to keep a record of who, what, where, when, etc.  A call has lots
of context - "what project is being discussed", "who is being called",
"who is being talked about", "what is being talked about", "what the
outcome is", "what actions need to happen as a result of this call", etc.
Below is what I want to do when making a call.

I start by creating a call record (some sort of dropdown or list of
possible records I can create).  This call record is not much more than a
dated and typed record that is used as a container to hold other things.
On my screen I have a newly created blank call record.  I'm going to
call Dan to talk about a business idea, so I find Dan's person record in
the quick search box and drag his person record into the call record.
All of Dan's information is shown in the call record, but it's really
just a reference back to his actual person record.

We're going to discuss a new idea I had and previously I had created an
idea record of my thoughts.  I find this in the quick search box and drag
it into the call record too.

While talking, I create a new note record inside the call record that
is just a free-form text field.  Perhaps we use a Google Wave or EtherPad
type system too.  All of these records are being associated with the
original call record that I created.

When done talking, we each may have some things to do.  I can create
action records that asking for a title and description.  I drag these
actions into my own user record and Dan's user record to denote who needs
to work on these things.  These are user records are readily available
on the screen already.

I might drag this call record itself into a container that holds our
conversations, or maybe tag the call record with our business name.
Whatever organization method works for us.

h2. Event Organization

h4. This explains how one might build a database.

My church is having an auction event where they need to keep track of
administrative "stuff".  Things they may need to keep track of are
ideas, call records, solicited items, aquired items, invited people,
seating charts, and so on.  The list of things evolves as their needs
change and the organization (schema) of those things also evolves over time.

To create this organization system, we need some basic types.  These types
are generally listed above.  We start by creating an auction type and an
auction has a title and description.  An auction has many items and ideas,
so we create those types and tell auction type that it can have children
of these types.  In a sense, we've created a has_many relationship,
but let's not think of that right now.  Auctions can have many ideas
and can have many items.

Let's start using this because we have some ideas.  We create a new
auction called "Gala 2009" and in that auction create some new ideas.
We also have some items left over from the last auction so we add those
to the auction as well.

Now the "Gala 2009" auction page has a bunch of stuff on it.  It has a
bunch of items and a bunch of ideas all inline.  We'd like to declutter
this a bit so we go to the Auction type and change its view.  Rather than
showing all the children inline, we set it up to show links to the items
and ideas.  Now clicking on the items in an auction will open up a new
page showing the items associated with that auction.

We now decide we want to differenitate between pending items and
committed items.  So we drop a couple of folders into the auction and
drag all the items into the appropriate folders.  As items are aquired,
they are moved from one folder to another.

There is much more to this story that needs to be written.

h2. File Archival

Files are important, disks are cheap, and hardware and users are
unreliable.  What I mean by this is, there are some really important
files that we don't want to lose such as digital photographs, family
videos, documents, things we purchase online, etc.  We put these files on a
single piece of magnetic metal spinning at 7200 RPM microns away from a
moving head and impending doom.  To increase our risk, we store them in
a volatile filesystem where accidental deletion or misuse can wipe out
unreplacable data.

This isn't an advertisement for a backup system, but it might as well be
because that is an eventual consequence of this use case.  These files
are primarily write-once-read-many types files.  You don't edit original
photographs or videos; documents may change but you may what an older
version; things your purchase online don't change either.

When storing files in this system, they can be stored along side
with other data or organizated in some way that is meaningful to you.
Files can be tagged like any other record and can be associated with
any number of other records.  

Uploading files could either be done with a web browser or some drag and
drop type system or even automatically when files change.  Once in
the system, they can be manipulated as needed.
